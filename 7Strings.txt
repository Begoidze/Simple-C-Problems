#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);

/*
 * Complete the 'palindromeIndex' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts STRING s as parameter.
 */

bool palindromecheck(string s){
    int size = s.length();
    for(int i = 0; i < size / 2; i++){
        if(s[i] != s[size - 1 -i]){
            
            return false;
            
        }
    }
    
    return true;
}

int palindromeIndex(string s) {
    int answer = -1;
    int size = s.length();
    int i = 0;
    string temp;
    if(palindromecheck(s)){
        
        return -1;
        
    }
    while (s[i] == s[size - 1 - i] && i <= size / 2){
        
        i++;
        
    }
    
        
    temp = s.substr(0, i) + s.substr(i + 1);
    
    if(palindromecheck(temp)){
        
        return i;
        
    }
    
    temp = s.substr(0, size - 1 - i) + s.substr(size - i);
     if(palindromecheck(temp)){
        
        return size - i - 1;
        
    }
    return answer;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string q_temp;
    getline(cin, q_temp);

    int q = stoi(ltrim(rtrim(q_temp)));

    for (int q_itr = 0; q_itr < q; q_itr++) {
        string s;
        getline(cin, s);

        int result = palindromeIndex(s);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
